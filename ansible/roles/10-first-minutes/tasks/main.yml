---
- name: Set root password
  user:
    name: root
    password: "{{ root_password }}"

# - name: Replace lines containing buster-backports in sources.list
#   ansible.builtin.lineinfile:
#     path: /etc/apt/sources.list
#     regexp: '^.*buster-backports.*$'
#     line: ""|
#       deb http://archive.debian.org/debian buster-backports main contrib non-free
#       deb-src http://archive.debian.org/debian buster-backports main contrib non-free""
#     state: present
#   become: true

- name: Remove old buster-backports entries
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list
    regexp: '^.*buster-backports.*$'
    state: absent
  become: true

# - name: Add deb line for buster-backports
#   ansible.builtin.lineinfile:
#     path: /etc/apt/sources.list
#     line: "deb http://archive.debian.org/debian buster-backports main contrib non-free"
#     insertafter: EOF
#   become: true

# - name: Add deb-src line for buster-backports
#   ansible.builtin.lineinfile:
#     path: /etc/apt/sources.list
#     line: "deb-src http://archive.debian.org/debian buster-backports main contrib non-free"
#     insertafter: EOF
#   become: true


- name: Update apt-cache and upgrade
  apt:
    force_apt_get: yes
    update_cache: "True"
    cache_valid_time: 3600
    upgrade: yes

- name: Install packages
  apt:
    force_apt_get: yes
    name: "{{ packages }}"  

- name: Copy unattended upgrades 10 settings
  copy:
    mode: "644"
    src: files/apt_periodic
    dest: /etc/apt/apt.conf.d/10periodic

- name: Copy unattended upgrades 50 settings
  copy:
    mode: "644"
    src: files/apt_periodic_50
    dest: /etc/apt/apt.conf.d/50unattended-upgrades

- name: Create user
  user:
    name: "{{ server_user }}"
    password: "{{ server_user_pass }}"
    state: present
    shell: /bin/bash
    groups: "{{ server_user_groups }}"

- name: Debug the keys being fetched
  debug:
    msg: "Adding keys from https://github.com/{{ item }}.keys for user {{ server_user }}"
  with_items: "{{ pub_ssh_key_github_users }}"

- name: Add ssh-key for all new users via GitHub
  authorized_key:
    user: "{{ server_user }}"
    key: "https://github.com/{{ item }}.keys"
    # exclusive: yes
    state: present
  with_items: "{{ pub_ssh_key_github_users }}"

- name: Add user to sudoers
  lineinfile:
    dest: /etc/sudoers
    regexp: "{{ server_user }} ALL"
    line: "{{ server_user }} ALL=(ALL) NOPASSWD:ALL"
    state: present
    validate: "/usr/sbin/visudo -cf %s" # kan få fel med line "{{ server_user }} testing"

- name: Disallow root and password ssh access
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: "/usr/sbin/sshd -T -f %s" # kan få fel med line "PermitRootLogin testing"
  with_items:
    - regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication no"
    - regexp: "^PermitRootLogin"
      line: "PermitRootLogin no"
  notify: restart ssh

- name: flush handlers to restart SSH
  meta: flush_handlers # we cant do it later because after this we cant ssh as root

- name: Only allow user to ssh
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^AllowUsers"
    line: "AllowUsers {{ server_user }}"
    state: present
  # ignore_errors: yes

- name: SSH configuration
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
  notify: restart ssh

- name: Remove default user
  remote_user: "{{ server_user }}"
  user:
    name: azureuser
    state: absent
    force: yes
    remove: yes
  ignore_errors: yes

- name: Restart SSH service
  service:
    name: ssh
    state: restarted